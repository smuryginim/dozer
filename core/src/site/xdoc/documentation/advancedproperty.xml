<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Mapping Concepts</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Mapping Concepts">
      <subsection name="Assembler Pattern">
        <p>
          Dozer can be used as an
          <a href="http://www.martinfowler.com/eaaCatalog/dataTransferObject.html" target="_blank">Assembler</a>
          . Martin Fowler has a great explanation of why and when you would use an
          <a href="http://www.martinfowler.com/eaaCatalog/dataTransferObject.html" target="_blank">Assembler</a>
          . Basically, it is a way to take multiple fine grain objects and create one coarse grain object used for
          data transfer. As long as you have mappings defined for each of your fine grained objects to your coarse
          grain object you can call the mapper multiple times to achieve the desired assembler pattern.
        </p>
        <source>
          <![CDATA[ 
mapper.map(sourceA, ClassB.class);
            ]]>
        </source>
        <p>
          Let's say that ClassA, ClassB, and ClassC all map to ClassD. First create these individual mappings in
          the mapping file. Next, call the mapper once for each mapping. Note that this would also work in a
          bi-directinonal manner.
        </p>
        <source>
          <![CDATA[ 
ClassD d = new ClassD();
mapper.map(sourceA, d);
mapper.map(sourceB, d);
mapper.map(sourceC, d);
            ]]>
        </source>

      </subsection>
    </section>
  </body>
</document>